x = 1:16
A = matrix(data = x, nrow = 4, ncol = 4, byrow=TRUE)
A[2,4] # valor na segunda linha e quarta coluna de A
## Para extrair todos os elementos de uma linha, basta não especificar o índice
## correspondente à coluna.
A[3,] # terceira linha de A
## Para extrair todos os elementos de uma coluna, basta não especificar o
## índice correspondente à linha.
A[,2] # segunda coluna de A
## Índices negativos excluem os elementos indicados.
A[-3,] # matriz A sem a terceira linha
A[,-3] # matriz A sem a terceira coluna
## Pode-se utilizar vetores de índices para selecionar uma submatriz de uma
## matriz.
A[1:3,] # submatriz de A: elementos da primeira à terceira linha
A[,2:4] # submatriz de A: elementos da segunda à quarta coluna
## O comando abaixo seleciona a submatriz de A formada pelos elementos da
## primeira à terceira linha, e da segunda à quarta coluna.
A[1:3,2:4]
##O comando abaixo seleciona a submatriz de A formada pelos elementos da
## elementos da primeira e terceira linhas, segunda e quarta colunas.
A[c(1,3),c(2,4)]
# DATA FRAME:
## Data frames são utilizados para armazenar dados tabulados no R. Eles são
## usualmente criados quando lemos um arquivo de dados para ser analisado.
## Internamente no R, os data frames são representados como uma lista especial
## onde cada elemento da lista possui o mesmo tamanho.
## os elementos de um data frame não precisam ser da mesma classe.
## Um data frame pode ser criado explicitamente por meio da função data.frame().
pacientes = data.frame(id = c("P1","P2","P3","P4"),
sexo = c("feminino", "feminino", "masculino", "masculino"),
pad=c(80, 85, 100, 95), pas = c(130, 140, 150, 145))
pacientes
names(pacientes)
row.names(pacientes)
row.names(pacientes) = c("Bia", "Claudia", "Leo", "Carlos")
pacientes
## Temos aqui um data frame com 4 variáveis, nomeadas id, sexo, pad e pas.
## O atributo names de um data frame retorna os nomes das colunas ou variáveis
## do data frame. Um outro atributo de um data frame é chamado row.names, que
## fornece uma informação sobre cada linha do data frame. Podemos especificar
## os nomes das linhas, atribuindo valores a row.names, como mostra o exemplo anterior.
# ACESSANDO OS ELEMENTOS DE UM DATA FRAME:
## Os elementos de um data frame podem ser acessados como os elementos de uma
## lista ou de uma matriz. As variáveis podem ser identificadas pela sua posição
## no data frame. Vejamos o seguinte script, utilizando o data frame pacientes.
pacientes$pad       # mostra os valores da pad dos pacientes
pacientes[, c(3,4)]   # exibe os valores de pad e pas dos pacientes
pacientes[c(1,2), ]   # exibe os dois primeiros registros de pacientes
pacientes[, c("id","pad")]  # colunas especificadas pelo nome
pacientes [, -c(1,3)]  # não exibe as colunas 1 e 3
pacientes [, c(-1,-3)]  # idem anterior
pacientes [c(1,4), c(3,4)]  # exibe pad e pas dos pacientes 1 e 4
pacientes[pacientes$sexo == "feminino",] # pacientes do sexo feminino
pacientes[pacientes$pas > 140,]  # seleciona os pacientes com pas > 140
subconjunto <- pacientes [, -1]  # cria um novo data frame sem os ids
subconjunto
# VALORES AUSENTES:
##  valores ausentes (missing values) são denotados por NA ou NaN.
## m valor NaN também é NA, mas a recíproca não é verdadeira. As funções is.na()
## e is.nan() são usadas para testar se um objeto é NA ou NaN, respectivamente.
x <- c(1, 2, NA, 10, 3) # vetor com um elemento NA
is.na(x) # retorna um  vetor lógico indicando que elementos são NA
is.nan(x) # retorna um  vetor lógico indicando que elementos são NAN
x <- c(1, 2, NA, 10, NaN) # vetor com elementos NA e NaN
is.na(x) # observe que NaN também é considerado como NA
is.nan(x) # observe que NA não considerado um NaN
x[ !is.na(x)]  # remove todos os elementos NA ou NaN de x
# ESTRUTURAS BÁSICAS DO R:
## Aqui iremos aprender as operações básicas
## e as comparações lógicas que podem ser realizadas com elas
## CONSOLE DO RSTUDIO:
### Permite ao usuário digitar, executar os comandos
### e visualizar os resultados.
## ">" --> "Prompt".
## o resultado comando é o que chamamos de "OUTPUT" ou "saída"
## EXEMPLO 1º:
4+3-5
## mais de um comando que podem ser digitados na mesma linha
## separados por ";":
# EXEMPLO 2º:
2*5+1; 3^2+28/7
## a ordem de prioridade das operações são
## potenciação, multiplicação/divisão, adição/subtração
## caso a gente queira mudar os prioridades, deve-se usar
## o parênteses, e nunca colchetes ou chaves(essa até pode
## mas não é recomendado).
## EXEMPLO EXTRA:
2*(5+1)
## e não:
2*[5+1]
## EXEMPLO 3º: A expressão abaixo gera a sequência de números
## inteiros de 10 a 50. Agora o resultado tem mais de 1 elemento.
## Os números entre colchetes indicam a posição do elemento seguinte
## na sequência de números.
10:50
# OBJETOS NO R:
## Tudo no R é um objeto. Para atribuir resultados de operações
## a algum objeto que pode posteriormente ser manipulado
## usamos a expressão de atribuição "<-":
objeto <- expressão
## EXEMPLO EXTRA:
y <- 4  # Lê-se "y recebe 4"
## Isso criou uma memória no computador, como pode-se observar
## no environment, assim:
y
# Outra forma de mostrar isso é por meio da função "print", so que
# não usamos muito ela.
print(y)
### OBSERVAÇÃO: letras maiúsculas e minúsculas são consideradas
### diferentes para o R.
# O R possui 5 classes básicas ou "atômicas" de objetos:
## -> character;
## -> numeric (número reais);
## -> integer (número inteiros);
## -> complex (números complexos);
## -> logical (Falso/Verdadeiro).
### A fç class(), aplicada a um objeto, retorna a sua classe:
x <- "ola"
class(x)
x <- 'ola'
class(x)
y = 2
class(y)
y = 2L
class(y)
z.1 = TRUE # ou so colar o T
class(z.1)
z.2 = FALSE #ou s colocar o F
class(z.2)
c1 = 1+0i
class(c1)
# OBSERVAÇÃO: A aba Environment do R (na parte superior direita)
# mostra os objetos criados até então na sessão corrente.
# VALORES ESPECIAIS:
## O R possui alguns valores que são especiais:
## NA -> Valor indefinido ( not a number)
# EXEMPLO EXTRA:
0/0
## Inf --> Infinito e nos permite considerar resultados de operações como:
# EXEMPLO EXTRA:
1/0
# ou:
1/Inf
##-Inf --> Menos infinito
# EXEMPLO EXTRA:
1/-Inf
## NaN --> Valores ausentes (PROXIMOS TÓPICOS)
# FUNÇÕES:
## Em geral, ao relaizar uma análise estatística, o usuário
## não irá implementar novas funções, e sim irá utilizar
## as funções já disponíveis.
### As funções no R possuem um nome seguido de zero ou mais argumentos
### entre parênteses.
# EXEMPLO:
x <- c(1, 4, 6, 10,1)# cria um vetor contendo os números 1, 4, 6, 1 e 10
sort(x, decreasing = TRUE)  # ordena x em ordem decrescente
min(x)  # menor valor de x
max(x)  # maior valor de x
sum(x)  # somatório dos elementos de x
prod(x)  # produto dos elementos de x
length(x) # tamanho do vetor x (número de elementos)
unique(x)  #elementos distintos de x
# Outros detalhes a mais serão dados posteriormente.
# VETORES (VECTORES)
View(juul2)
# Um conjunto de dados que contém 1339 observações e 8 variáveis.
# Cada umadessas variáveis é tratada pelo R como uma coleção de valores
# de mesma classe. Assim, cada variável é chamada de vetor no R.
# Uma maneira de criar vetores é usar a função c(entradas do vetor separadas
# por vírgulas).
# EXEMPLO EXTRA 1º:
c(3,7,2,12)
# EXEMPLO EXTRA 2º:
v = c("Luiz", "Maria", "Rafael")  # Vetor de nomes
v
# EXEMPLO EXTRA 3º:
x = c(TRUE, FALSE, FALSE)
z = 10:30  #Tmbém é um vetor
z
# EXEMPLO EXTRA 4º:
z = 30:10 #ordem decrescente
z
v = c(7,9)
class(v)  # A classe de um vetor é a classe de cada um de seus elementos
## Pode-se gerar um vetor por meio da concatenação de um outro
## vetor com outros elementos.
# EXEMPLO EXTRA 5º:
c(v,11,3)
## A função vector() também pode ser usada para inicializar vetores.
# EXEMPLO EXTRA 6º:
x <- vector("numeric", length = 15)
x
# Acessando elementos de um vetor:
## Um elemento de um vetor pode ser acessado por meio de um índice
## entre colchetes que indica a posição do elemento.
# EXEMPLO EXTRA 7º:
x <- c(-3, 4, 7, 9, 10)
x[3]  # Indica o terceiro elemento do vector x (7)
## Múltiplos elementos podem ser extraídos, por meio de um vetor de inteiros:
# EXEMPLO EXTRA 8º:
y <- 10:20
y [3:5] # retorna o 3º, 4º e o 5º elementos de y.
y[c(4, 2)]  # retorna o 4º e o 2º elementos de y.
## Índices negativos significam que os elementos indicados pelos índices
## não serão selecionados.
# EXEMPLO EXTRA 9º:
y[c(-3, -8)] # retorna todos os elementos de y, menos o 3º e o 8º.
## O comando que abaixo retorna os elementos de y, com exceção dos situados
## entre o 3º e o 8º, inclusive.
# EXEMPLO EXTRA 10º:
y[-3:-8]
## Para selecionar elementos de um vetor, pode-se utilizar também uma
## expressão lógica, com os operadores == (igual), > (maior), < (menor),
## >= (maior ou igual), <= (menor ou igual), != (diferente),
## ou combinações de expressões lógicas por meio dos operadores
## booleanos “OU” (|), “E” (&), e “Não” (!).
# EXEMPLO 1º:
y[y == 15]  # Seleciona o elemento de y igual a 15
# EXEMPLO 2º:
y[y < 14]   # Seleciona os elementos de y menores que 14
# EXEMPLO 3º:
y[!(y < 17)]   # Seleciona os elementos de y não menores do que 17.
## O comando abaixo seleciona os elementos de y menores que 13 ou maiores que 18.
## reparem no uso dos parênteses. Nesse caso, eles não são necessários,
## mas facilita a leitura da expressão.
# EXEMPLO 4º:
y[(y < 13)|(y > 19)]
## O comando abaixo seleciona os elementos de y maiores do que 16 e menores que 19.
# EXEMPLO 5º:
y[(y > 16) & (y < 19)]
## Os operadores lógicos também funcionam com valores textuais, já que o R
## considera a ordem alfabética.
# EXEMPLO 6º:
x = c("Antônio", "Joana", "Carla")
x[x > "H"]
## As operações de seleção por meio de expressões lógicas são equivalentes
## a gerar um vetor de valores lógicos que indica em cada posição se o elemento
## correspondente deve ser ou não selecionado e utilizar este vetor para
## realizar a seleção.
# EXEMPLO 7º:
y[y <= 13]  # Esse comando seleciona os elementos de y menores ou iguais a 13.
# EXEMPLO 8º:
u <- y <= 13  # O comando cria um vetor com 11 elementos sendo os 4 primeiros TRUE e os restantes FALSE.
u
## O comando abaixo seleciona todos os elementos de y cujos elementos
## na posição correspondente em u possuem o valor TRUE.
# EXEMPLO 9º:
y[u]
## Elementos de um vetor também podem ser alterados por meio dos operadores de
## atribuição. O exemplo a seguir mostra que o 3º elemento de y foi alterado por 50.
# EXEMPLO 10º:
y[3] <- 50  # Altera o 3º elemento do vetor y
y           # Elementos do vetor y após a alteração.
# GERANDO SEQUÊNCIAS - Função seq(_, _, _)
## A função seq possui 3 argumentos, e gera uma sequência do primeiro argumentos
## , com salto entre valores consecutivos de acordo com o terceiro argumento.
## Para sequência decrescentes, usa-se o inverso, o terceiro argumento deverá vir
## acompanhado do sinal negativo.
## Ela pode ser escrita apenas com os dois primeiros argumentos.
## com o terceiro argumento sendo = 1 ou -1 (decrescentes).
# Alguns exemplos de sequências:
# EXEMPLO 1º:
seq(10,22,3)
# EXEMPLO 2º:
seq(10,22,5)
# EXEMPLO 3º:
seq(22,10,-3)
# EXEMPLO 4º:
seq(22,10,-5)
# EXEMPLO 5º:
seq(3,8)  # 3<8, logo 3º argumento implícitp = 1
# EXEMPLO 6º:
3:8  # gera o mesmo resultado acima
# EXEMPLO 7º:
seq(8,3)  # 8>3, logo 3º implícito = -1
# EXEMPLO 8º:
8:3  # gera o mesmo resultado acima
# EXEMPLO 9º:
seq(0,1,.1)  # sequência de 0 a 1 com incremento de 0,1
# GERANDO REPEÇÕES: funçãop rep(_,_)
## A função rep, como o nome indica, gera uma sequência onde o 1º argumento
## representaa a expressão a ser repetida. O 2º argumento representa o número
## de repetições.
# EXEMPLO 1º:
rep(0,6)  # repetição de um escalar
# EXEMPLO 2º:
rep(c(1,7),4)  # repetição de um vetor
# EXEMPLO 3º:
rep(seq(-1,1,0.5),2) # repetição de uma sequência
# LISTAS (list)
## São coleções de elementos que não precisam ser da mesma classe.
## list é uma importante classe de objetos no R.
## elas podem ser criadas explicitamente usando a função list()
# EXEMPLO 1º:
x <- list(5, "Kiwi", c(FALSE, TRUE, TRUE), 3 + 1i, 2L)
x
class(x)
x[[2]]
## OBSERVAÇÕES:
### Uma lista pode conter vetores e outras listas;
### cada componente da lista pode ser acessado por meio de um indice entre
### dois colchetes [[]]. Por exemplo, no exemplo acima, x [[2]] = "Kiwi";
## Uma lista vazia com um comprimento pré-especificado pode ser criada por meio
## da função vector(). Todos os elementos de uma lista vazia são
## inicializados com NULL. (TRADUZIDO = NULA(O))
# EXEMPLO 1º:
y <- vector("list", length = 3)
y
# EXTRAINDO MÚLTIPLOS ELEMENTOS DE UMA LISTA
## considerando que uma lista é um tipo especial de vetor, pode-se extrair
## vários elementos da lista de maneira semelhante ao utilizado para vetores:
# EXEMPLO:
x <- list(5, "kiwi", c(FALSE, TRUE, TRUE), 3 + 1i, 2L)
x[c(3,1)]  # seleciona o 3º e o 1º componentes da lista x, nesta ordem
# NOMES
## Vetores e listas podem ser criados com cada elemento recebendo um nome,
## e esses nomes podem ser usados para referenciar o respectivo elemento
# EXEMPLO:
x <- c(a=1, b=2)
x
x["a"]
x[1]
y <- list(a=1, b=FALSE, c="Kiwi")
y
y $c
y[[3]]
# OBSERVAÇÕES:
## cada elemento do vetor pode ser acessado pela sua posição
## ou pelo seu nome entre aspas""
## Cada elemento de uma lista pode ser acessado pela sua posição entre
## [[]] ou pelo seu nome procedido por "$"
### Para saber os nomes de uma lista ou vetor, usamos a função names();
names(x)
names(y)
# COERÇÃO:
## Ao criar um vetor com valores de diferentes classes, o R tenta uma maneira
## de transformar todos os objetos como sendo de uma mesma classe.
## Esta transformação é chamada de coerção.
## Logical --> Integer --> numeric --> complex --> character
# EXEMPLOS:
y <- c(TRUE, 2L, FALSE)
y
class(y)
## explicação: A classe do objeto y é integer pois o número 2 (da classe integer)
## sucede aos elementos da clase logical na sequência de converssão. Ao converter
## um valor lógico para numérico, TRUE é equivalente a 1 e FALSE a 0.
y <- c(1.7, 4L)
y
class(y)
## explicação: a classe do objeto y é numérico e o número 4 (integer) é
## convertido para numeric.
y <- c(1.7, 3 + 5i)
y
class(y)
y <- c(1.7 + 2.3i, "a")
y
class(y)
## Objetos podem ser convertidos de uma classe para outra por meio das
## funções as.*: as.numeric(), as.logical(), as.integer(), as.character(),
## as.complex().
# EXEMPLO:
x <- c(0, 1, 4, 5.8)
as.logical(x)    # 0 é convertido em FAlSE, os outros números em TRUE
as.character(x)
## OBSERVAÇÃO: Quando o R não consegue realizar a conversão,
## NA é gerado como resultado e uma mensagem de alerta é emitida.
x <- c("a", "b", "c", 8.8)
as.numeric(x)
as.logical(x)
## A classe do objeto x é character. Portanto o elemento 8.8 é tratado como
## character e não como número, mas ele pode ser convertido para número.
## Os elementos “a”, “b” e “c” não podem ser convertidos nem para números
## nem para valores lógicos.
## á a avaliação de as.logical(x) retorna todos os elementos NA, já que mesmo
## o elemento do tipo character de x (“8.8”) não pode ser convertido
## para um valor lógico.
## Vamos supor que temos uma variável sexo representada como um vetor
## numérico, onde 1 representa feminino e 2 masculino.
sexo = c(1, 2, 2, 1, 1, 1, 2, 2, 1)
## Na análise estatística, precisamos converter esta variável de numérica
## para categórica. Podemos usar a função as.factor() como mostrado abaixo,
## onde nomeamos o objeto transformado como sexo.fac.
sexo.fac = as.factor(sexo)
sexo.fac
## Agora vamos colocar nomes descritivos aos níveis da variável sexo.fac,
## usando o atributo levels, como abaixo:
levels(sexo.fac) = c("feminino", "masculino")
sexo.fac
# MATRIZES:
## Matrizes são vetores com um atributo de dimensão (dimension), que é ele
## próprio um vetor inteiro de tamanho 2: número de linhas e número de colunas.
## Uma matriz é criada por meio da função matrix().
## Esta função possui os seguintes argumentos: - data: vetor que contém os
## valores da matriz; - nrow: número de linhas da matriz; - ncol: número de
## colunas da matriz; - byrow: indica como a matriz é montada. Se for TRUE,
## ela é montada linha a linha. Se for FALSE, ela é montada coluna a coluna;
## - dimnames: nomes das linhas e colunas, respectivamente.
m = matrix(data = 1:6, nrow = 2, ncol = 3, byrow = T,
dimnames = list(c("trat1", "trat2"), c("out1", "out2", "out3")))
m
## Nesse exemplo, a matriz vai sendo preenchida com os números de 1 a 6,
## linha a linha.
## O comando abaixo vai gerar uma matriz com os mesmos elementos da matriz
## acima, mas omitindo alguns argumentos. Quando o nome de um argumento não
## é especificado, o R tenta associar um objeto à respectiva posição do argumento.
m = matrix(1:6, ncol = 3, byrow = T)
m
## como o sistema calcula como é a matriz?
## simples, Como há 6 elementos no argumento data e 3 colunas, então o
## número de linhas é calculado dividindo-se o número de elementos (6)
## pelo número de colunas (3).
## Se o argumento byrow não for especificado, então a matriz será construída a
## partir das colunas. A matriz vai sendo preenchida com os números de 1 a 6
## coluna a coluna.
m = matrix(1:6, nrow = 2)
m
## Se os valores da matriz não forem especificados, as células da matriz
## são preenchidas com NA.
## Para obter a dimensão de uma matriz, use a função dim.
m <- matrix(1:6, nrow= 2, byrow = T)
m     # se os valores da matriz não são especificados,
m <- matrix(1:6, nrow= 2, byrow = T)
m     # se os valores da matriz não são especificados,
## Se somente um valor for especificado para a matriz, ela será criada com
## todos os valores iguais.
matrix(data = 2, nrow = 3, ncol = 2)
## Matrizes também podem ser criadas a partir de vetores, adicionando um atributo
## de dimensão por meio da função dim().
m <- 1:10
dim(m) <- c(2, 5)
m
## Outra maneira de se criar matrizes é pela adição de linhas ou colunas por
## meio das funções rbind() e cbind(), respectivamente. rbind() monta uma matriz,
## empilhando os argumentos linha a linha na ordem em que aparecem na lista.
## Já cbind() monta a matriz colocando os argumentos lado a lado na ordem em que
## aparecem na lista.
x <- 1:4
y <- 10:13
rbind(x, y)
cbind(x, y)
# EXTRAINDO ENTRADAS/ LINHAS/ COLUNAS/ SUBMATRIZES DE UMA MATRIZ
## Os elementos de uma matriz podem ser acessados por um par de índices que
## indicam, respectivamente, a linha e a coluna do elemento desejado.
x = 1:16
A = matrix(data = x, nrow = 4, ncol = 4, byrow=TRUE)
A[2,4] # valor na segunda linha e quarta coluna de A
## Para extrair todos os elementos de uma linha, basta não especificar o índice
## correspondente à coluna.
A[3,] # terceira linha de A
## Para extrair todos os elementos de uma coluna, basta não especificar o
## índice correspondente à linha.
A[,2] # segunda coluna de A
## Índices negativos excluem os elementos indicados.
A[-3,] # matriz A sem a terceira linha
A[,-3] # matriz A sem a terceira coluna
## Pode-se utilizar vetores de índices para selecionar uma submatriz de uma
## matriz.
A[1:3,] # submatriz de A: elementos da primeira à terceira linha
A[,2:4] # submatriz de A: elementos da segunda à quarta coluna
## O comando abaixo seleciona a submatriz de A formada pelos elementos da
## primeira à terceira linha, e da segunda à quarta coluna.
A[1:3,2:4]
##O comando abaixo seleciona a submatriz de A formada pelos elementos da
## elementos da primeira e terceira linhas, segunda e quarta colunas.
A[c(1,3),c(2,4)]
# DATA FRAME:
## Data frames são utilizados para armazenar dados tabulados no R. Eles são
## usualmente criados quando lemos um arquivo de dados para ser analisado.
## Internamente no R, os data frames são representados como uma lista especial
## onde cada elemento da lista possui o mesmo tamanho.
## os elementos de um data frame não precisam ser da mesma classe.
## Um data frame pode ser criado explicitamente por meio da função data.frame().
pacientes = data.frame(id = c("P1","P2","P3","P4"),
sexo = c("feminino", "feminino", "masculino", "masculino"),
pad=c(80, 85, 100, 95), pas = c(130, 140, 150, 145))
pacientes
names(pacientes)
row.names(pacientes)
row.names(pacientes) = c("Bia", "Claudia", "Leo", "Carlos")
pacientes
## Temos aqui um data frame com 4 variáveis, nomeadas id, sexo, pad e pas.
## O atributo names de um data frame retorna os nomes das colunas ou variáveis
## do data frame. Um outro atributo de um data frame é chamado row.names, que
## fornece uma informação sobre cada linha do data frame. Podemos especificar
## os nomes das linhas, atribuindo valores a row.names, como mostra o exemplo anterior.
# ACESSANDO OS ELEMENTOS DE UM DATA FRAME:
## Os elementos de um data frame podem ser acessados como os elementos de uma
## lista ou de uma matriz. As variáveis podem ser identificadas pela sua posição
## no data frame. Vejamos o seguinte script, utilizando o data frame pacientes.
pacientes$pad       # mostra os valores da pad dos pacientes
pacientes[, c(3,4)]   # exibe os valores de pad e pas dos pacientes
pacientes[c(1,2), ]   # exibe os dois primeiros registros de pacientes
pacientes[, c("id","pad")]  # colunas especificadas pelo nome
pacientes [, -c(1,3)]  # não exibe as colunas 1 e 3
pacientes [, c(-1,-3)]  # idem anterior
pacientes [c(1,4), c(3,4)]  # exibe pad e pas dos pacientes 1 e 4
pacientes[pacientes$sexo == "feminino",] # pacientes do sexo feminino
pacientes[pacientes$pas > 140,]  # seleciona os pacientes com pas > 140
subconjunto <- pacientes [, -1]  # cria um novo data frame sem os ids
subconjunto
# VALORES AUSENTES:
##  valores ausentes (missing values) são denotados por NA ou NaN.
## m valor NaN também é NA, mas a recíproca não é verdadeira. As funções is.na()
## e is.nan() são usadas para testar se um objeto é NA ou NaN, respectivamente.
x <- c(1, 2, NA, 10, 3) # vetor com um elemento NA
is.na(x) # retorna um  vetor lógico indicando que elementos são NA
is.nan(x) # retorna um  vetor lógico indicando que elementos são NAN
x <- c(1, 2, NA, 10, NaN) # vetor com elementos NA e NaN
is.na(x) # observe que NaN também é considerado como NA
is.nan(x) # observe que NA não considerado um NaN
x[ !is.na(x)]  # remove todos os elementos NA ou NaN de x
